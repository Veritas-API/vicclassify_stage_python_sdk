# coding: utf-8

"""
    Veritas Information Classifier (VIC)

    APIs

    OpenAPI spec version: Resource Specific
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ContentMatch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, offset=None, length=None, location=None, content=None, context=None):
        """
        ContentMatch - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'offset': 'int',
            'length': 'int',
            'location': 'str',
            'content': 'str',
            'context': 'str'
        }

        self.attribute_map = {
            'offset': 'offset',
            'length': 'length',
            'location': 'location',
            'content': 'content',
            'context': 'context'
        }

        self._offset = offset
        self._length = length
        self._location = location
        self._content = content
        self._context = context

    @property
    def offset(self):
        """
        Gets the offset of this ContentMatch.
        The offset (in characters) of the match within the classified text.  The classified text is the text conversion of the original document, so this offset may not be directly usable by a client with only access to the original document.

        :return: The offset of this ContentMatch.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this ContentMatch.
        The offset (in characters) of the match within the classified text.  The classified text is the text conversion of the original document, so this offset may not be directly usable by a client with only access to the original document.

        :param offset: The offset of this ContentMatch.
        :type: int
        """

        self._offset = offset

    @property
    def length(self):
        """
        Gets the length of this ContentMatch.
        The length of the content match, in characters.

        :return: The length of this ContentMatch.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this ContentMatch.
        The length of the content match, in characters.

        :param length: The length of this ContentMatch.
        :type: int
        """

        self._length = length

    @property
    def location(self):
        """
        Gets the location of this ContentMatch.

        :return: The location of this ContentMatch.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this ContentMatch.

        :param location: The location of this ContentMatch.
        :type: str
        """

        self._location = location

    @property
    def content(self):
        """
        Gets the content of this ContentMatch.
        Content that matched the rule (e.g. a word or phrase), where available.

        :return: The content of this ContentMatch.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this ContentMatch.
        Content that matched the rule (e.g. a word or phrase), where available.

        :param content: The content of this ContentMatch.
        :type: str
        """

        self._content = content

    @property
    def context(self):
        """
        Gets the context of this ContentMatch.
        The matching content with some surrounding context, where available.

        :return: The context of this ContentMatch.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this ContentMatch.
        The matching content with some surrounding context, where available.

        :param context: The context of this ContentMatch.
        :type: str
        """

        self._context = context

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContentMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
